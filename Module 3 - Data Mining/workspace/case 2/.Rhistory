# Assign to total_daily how much you won/lost on each day
total_daily <- poker_vector + roulette_vector
total_daily
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
# The variable days_vector
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Assign the names of the day to roulette_vector and poker_vector
names(poker_vector) <-  days_vector
names(roulette_vector) <- days_vector
poker_vector
roulette_vector
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
# Assign days as names of poker_vector
names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Assign days as names of roulette_vectors
names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_vector
roulette_vector
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
poker_vector
# Roulette winnings from Monday to Friday
roulette_vector <-  c(-24, -50, 100, -350, 10)
roulette_vector
vegas
# Define the variable vegas
vegas <- "Go!"
vegas
vegas[1]
# Assign a value to the variable my_apples
my_apples <- 5
# Fix the assignment of my_oranges
my_oranges <- 6
# Create the variable my_fruit and print it out
my_fruit <- my_apples + my_oranges
my_fruit
# Assign a value to the variable my_apples
my_apples <- 5
# Fix the assignment of my_oranges
my_oranges <- "six
# Create the variable my_fruit and print it out
my_fruit <- my_apples + my_oranges
my_fruit
# Assign a value to the variable my_apples
my_apples <- 5
# Fix the assignment of my_oranges
my_oranges <- "six
# Create the variable my_fruit and print it out
my_fruit <- my_apples + my_oranges
my_fruit
my_apples <- 5
my_oranges <- "six"
my_fruit <- my_apples + my_oranges
my_fruit
source('~/.active-rstudio-document', echo=TRUE)
.jinit()
jinit()
javareconf
R CMD javareconf
install.packages("RWeka")
install.packages("RWeka")
install.packages("RWeka")
source('~/.active-rstudio-document', echo=TRUE)
install.packages(‘rJava’, type=’source)
install.packages("rJava, type="source")
install.packages("rJava", type="source")
data.frame
?data.frame
testd1 <- data.frame(a=1,b=2,c=3,d=4, row.name = c("entry1"))
v <- c(9,8,7,6)
testd1
testd1 <- data.frame(a=1,b=2,c=3,d=4)
row.names(testd1) <- c("entry1")
testd1
testr <- testd1 * v
testr
testd1 <- data.frame(a=1,b=2,c=3,d=4)
row.names(testd1) <- c("entry1")
v <- c(9,8,7,6)
testd1
testr <- testd1 * v
testr
# Crosscut - BEGIN
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Crosscut - END
data <- read.csv("Makeover Monday.csv")
summary(data)
# Crosscut - BEGIN
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Crosscut - END
data <- read.csv("Makeover Monday.csv")
summary(data)
# Crosscut - BEGIN
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Crosscut - END
data <- read.csv("Makeover Monday.csv")
summary(data)
str(data)
summary(data)
nrow(data)
ncol(data)
colnames(data)
rm(data)
data <- read.csv("Makeover Monday.csv")
rm(data)
data <- read.csv("Makeover Monday.csv")
summary(data)
rm(data)
summary(data)
rm(data)
data <- read.csv("Makeover Monday2.csv")
rm(data)
data <- read.csv("Makeover Monday3.csv")
summary(data)
str(data)
levels(data$Week)
rm(data)
data <- read.csv("Makeover Monday3.csv")
str(data)
colnames(data)
str(data)
levels(data$Week)
levels(data$Name)
colnames(data)
str(data)
levels(data$Name)
levels(data$Pin.Note)
summary(data)
mtcars
counts <- table(data$Week)
barplot(counts, main="Weekly Distribution",
xlab="Number of Posts")
library(rjson)
install.packages("rjson")
library(rjson)
?toJSon
?toJson
?toJSON
x <- toJSON(unname(split(data, 1:nrow(data))))
counts2 <- table(data$Original.Link)
barplot(counts, main="Weekly Distribution",
xlab="Number of sites")
barplot(counts2, main="Weekly Distribution",
xlab="Number of sites")
levels(data$Original.Link)
summary(data)
counts2 <- table(data$Name)
?barplot
counts2 <- table(data$Name)
counts2
barplot(counts2, main="Weekly Distribution", xlab="Number of posts")
?barplot
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE)
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE,
names.arg = c(data$Name))
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE,
names.arg = data$Name)
data$Name
str(data)
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE,
names.arg = data[,8])
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE,
names.arg = data[8,])
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE,
names.arg = data[8,])
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE)
barplot(counts, main="Weekly Distribution",
xlab="Number of Posts")
?barplot
# Crosscut - BEGIN
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
source("load_movie_ratings_dataset.R")
# Crosscut - END
library(ggplot2)
p <- ggplot(data=movieData, aes(x=BudgetMillions))
h <- p + geom_histogram(binwidth = 10, aes(fill=Genre), color="Black")
h
# Add axes label
h + xlab("Money Axis")
h + ylab("Number of Movies")
?theme
# Format label
h + xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
# Format legend
h + xlab("Money Axis") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1))
# Put title
h + xlab("Money Axis") +
ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
theme(axis.title.x = element_text(color="DarkGreen", size=30),
axis.title.y = element_text(color="Red", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=30),
legend.text = element_text(size=20),
legend.position = c(1,1),
legend.justification = c(1,1),
plot.title = element_text(color="DarkBlue",
size=40,
family="Courier"))
p <- ggplot(data=movieData, aes(x=BudgetMillions))
h <- p + geom_histogram(binwidth = 10, aes(fill=Genre), color="Black")
h
library(ggplot2)
ggplot(data=data, aes(x=Week))
counts <- table(data$Week)
barplot(counts, main="Weekly Distribution",
xlab="Number of Posts")
summary(data)
nrows(data)
nrow(data)
counts2 <- table(data$Name == 'Rody Zakovich')
counts2
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts", horiz=TRUE)
counts2 <- table(data$Name == 'Rody Zakovich')
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts")
barplot(counts[counts2], main="Weekly Distribution",
xlab="Number of posts")
barplot(counts[counts2,], main="Weekly Distribution",
xlab="Number of posts")
barplot(counts[,counts2], main="Weekly Distribution",
xlab="Number of posts")
counts <- table(data$Week)
counts2 <- table(data$Name == 'Rody Zakovich')
data2 <- data[data$Name == 'Rody Zakovich']
data2 <- data[data$Name == 'Rody Zakovich',]
data2
counts2 <- table(data2$Week)
barplot(counts[,counts2], main="Weekly Distribution",
xlab="Number of posts")
barplot(counts2, main="Weekly Distribution",
xlab="Number of posts")
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library("rstudioapi")
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load datasets
filePath <- paste(getwd(), "/data", sep = "")
files <- as.character((list.files(path = filePath)))
data <- unname(sapply(paste(filePath,.Platform$file.sep,files,sep=""), readLines))
# Load the data as a corpus
dataCorpus <- Corpus(VectorSource(data))
# Inspect the content of the document
inspect(dataCorpus)
# Replacing /, @ and | with space:
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
dataCorpus1 <- tm_map(dataCorpus, toSpace, "/")
dataCorpus2 <- tm_map(dataCorpus1, toSpace, "@")
dataCorpus3 <- tm_map(dataCorpus2, toSpace, "\\|")
# Convert the text to lower case
dataCorpus4 <- tm_map(dataCorpus3, content_transformer(tolower))
# Remove numbers
dataCorpus5 <- tm_map(dataCorpus4, removeNumbers)
# Remove english common stopwords
dataCorpus6 <- tm_map(dataCorpus5, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
dataCorpus7 <- tm_map(dataCorpus6, removeWords, c("said", "will"))
# Remove punctuations
dataCorpus8 <- tm_map(dataCorpus7, removePunctuation)
# Eliminate extra white spaces
dataCorpus9 <- tm_map(dataCorpus8, stripWhitespace)
# Text stemming
dataCorpus10 <- tm_map(dataCorpus9, stemDocument)
# Generate matrix
dtm <- TermDocumentMatrix(dataCorpus10)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
# Create word cloud
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library("rstudioapi")
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load datasets
filePath <- paste(getwd(), "/data", sep = "")
files <- as.character((list.files(path = filePath)))
data <- unname(sapply(paste(filePath,.Platform$file.sep,files,sep=""), readLines))
# Load the data as a corpus
dataCorpus <- Corpus(VectorSource(data))
# Inspect the content of the document
inspect(dataCorpus)
# Replacing /, @ and | with space:
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
dataCorpus1 <- tm_map(dataCorpus, toSpace, "/")
dataCorpus2 <- tm_map(dataCorpus1, toSpace, "@")
dataCorpus3 <- tm_map(dataCorpus2, toSpace, "\\|")
# Convert the text to lower case
dataCorpus4 <- tm_map(dataCorpus3, content_transformer(tolower))
# Remove numbers
dataCorpus5 <- tm_map(dataCorpus4, removeNumbers)
# Remove english common stopwords
dataCorpus6 <- tm_map(dataCorpus5, removeWords, stopwords("english"))
# Remove punctuations
dataCorpus8 <- tm_map(dataCorpus7, removePunctuation)
# Eliminate extra white spaces
dataCorpus9 <- tm_map(dataCorpus8, stripWhitespace)
# Text stemming
dataCorpus10 <- tm_map(dataCorpus9, stemDocument)
# Generate matrix
dtm <- TermDocumentMatrix(dataCorpus10)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
# Create word cloud
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dataCorpus7 <- tm_map(dataCorpus6, removeWords, c("http", "https"))
dataCorpus7 <- tm_map(dataCorpus6, removeWords, c("http", "https"))
dataCorpus8 <- tm_map(dataCorpus7, removePunctuation)
dataCorpus9 <- tm_map(dataCorpus8, stripWhitespace)
dataCorpus10 <- tm_map(dataCorpus9, stemDocument)
dtm <- TermDocumentMatrix(dataCorpus10)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
setwd("~/github/upnec/M3/workspace/Case 2")
library(RWeka)
library(ROCR)
install.packages("ROCR")
library(RWeka)
library(ROCR)
churndata <- read.csv("churndata.csv")
#summary(churndata)
#str(churndata)
#View(churndata)
# 2.1. Modeling a Decision Tree
J48Model <- J48(Churn.~., data = churndata)
summary(J48Model)
evaluate_Weka_classifier(J48Model,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.1.1. Accuracy: 94.2694 %
## 2.1.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a     b   <-- classified as
## 2803    47 |    a = False.
##  140   343 |    b = True.
##
## 2.1.3. True Positive Rate of Churn=True Class: 0.982
## 2.1.4. Precision of Churn=True Class: 0.952
## 2.1.5. ROC Area of Churn=True Class: 0.834
# 2.2 Creating a Rule Based Classifier
JRipModel <- JRip(Churn.~., data = churndata)
evaluate_Weka_classifier(JRipModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.2.1. Accuracy: 95.1095 %
## 2.2.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2796   54 |    a = False.
##  109  374 |    b = True.
##
## 2.2.3. True Positive Rate of Churn=True Class: 0.981
## 2.2.4. Precision of Churn=True Class: 0.962
## 2.2.5. ROC Area of Churn=True Class: 0.876
## 2.3. Creating an ANN
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
ANNModel <- MLP(Churn.~., data=churndata, control = Weka_control(H='5'))
evaluate_Weka_classifier(ANNModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.3.1. Accuracy: 94.3894 %
## 2.3.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2801   49 |    a = False.
##  138  345 |    b = True.
##
## 2.3.3. True Positive Rate of Churn=True Class: 0.983
## 2.3.4. Precision of Churn=True Class: 0.953
## 2.3.5. ROC Area of Churn=True Class: 0.905
## 2.4. Creating an Adaboost Learner with Rule Classifiers
AdaboostModel <- AdaBoostM1(Churn.~., data=churndata, control=Weka_control(W=list(JRip)))
evaluate_Weka_classifier(AdaboostModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.4.1. Accuracy: 94.9595 %
## 2.4.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2801   49 |    a = False.
##  119  364 |    b = True.
##
## 2.4.3. True Positive Rate of Churn=True Class: 0.983
## 2.4.4. Precision of Churn=True Class: 0.959
## 2.4.5. ROC Area of Churn=True Class: 0.903
## 2.5. Creating a Random Forest Model
RF <- make_Weka_classifier("weka/classifiers/trees/RandomForest")
RFModel <- RF(Churn.~., data=churndata, control = Weka_control(K=1))
evaluate_Weka_classifier(RFModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.5.1. Accuracy: 90.249  %
## 2.5.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2847    3 |    a = False.
##  322  161 |    b = True.
##
## 2.5.3. True Positive Rate of Churn=True Class: 0.999
## 2.5.4. Precision of Churn=True Class: 0.898
## 2.5.5. ROC Area of Churn=True Class: 0.909
## 3. ROC Curves
sample <- floor(.67 * nrow(churndata))
set.seed(123)
train_ind <- sample(seq_len(nrow(churndata)), size = sample)
churndatatrain <- churndata[train_ind,]
churndatatest <- churndata[-train_ind,]
J48ModelROC <- J48(Churn.~., data = churndatatrain)
JRipModelROC <- JRip(Churn.~., data = churndatatrain)
ANNModelROC <- MLP(Churn.~., data=churndatatrain, control = Weka_control(H='5'))
AdaboostModelROC <- AdaBoostM1(Churn.~., data=churndatatrain, control=Weka_control(W=list(JRip)))
RFModelROC <- RF(Churn.~., data=churndatatrain, control = Weka_control(K=1))
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
predictions <- cbind(predict(J48ModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(JRipModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(ANNModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(AdaboostModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(RFModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
labels <- cbind(labels, labels,labels,labels,labels) # labels must have the same count with the models you have
pred2 <- prediction(predictions, labels)
perf2 <- performance(pred2, "tpr", "fpr")
plot(perf2, col = list("red", "blue", "yellow", "black", "green"))
legend("bottomright",
legend = c("J48Model", "JRipModel", "ANNModel", "AdaboostModel", "RFModel"),
col = c("red", "blue", "yellow", "black", "green"),
lty = 1:1,
cex = 0.8)
