evaluate_Weka_classifier(RFModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.5.1. Accuracy: 90.249  %
## 2.5.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2847    3 |    a = False.
##  322  161 |    b = True.
##
## 2.5.3. True Positive Rate of Churn=True Class: 2847
## 2.5.4. Precision of Churn=True Class: 0.898
## 2.5.5. ROC Area of Churn=True Class: 0.909
## 3. ROC Curves
sample <- floor(.67 * nrow(churndata))
set.seed(123)
train_ind <- sample(seq_len(nrow(churndata)), size = sample)
churndatatrain <- churndata[train_ind,]
churndatatest <- churndata[-train_ind,]
churndata <- read.csv("churndata.csv")
setwd("~/Eson/Case 2")
churndata <- read.csv("churndata.csv")
#summary(churndata)
#str(churndata)
#View(churndata)
# 2.1. Modeling a Decision Tree
J48Model <- J48(Churn.~., data = churndata)
summary(J48Model)
evaluate_Weka_classifier(J48Model,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.1.1. Accuracy: 94.3894 %
## 2.1.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a     b   <-- classified as
## 2803    47 |    a = False.
##  140   343 |    b = True.
##
## 2.1.3. True Positive Rate of Churn=True Class: 2803
## 2.1.4. Precision of Churn=True Class: 0.952
## 2.1.5. ROC Area of Churn=True Class: 0.825
# 2.2 Creating a Rule Based Classifier
JRipModel <- JRip(Churn.~., data = churndata)
evaluate_Weka_classifier(JRipModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.2.1. Accuracy: 95.1095 %
## 2.2.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2796   54 |    a = False.
##  109  374 |    b = True.
##
## 2.2.3. True Positive Rate of Churn=True Class: 2796
## 2.2.4. Precision of Churn=True Class: 0.962
## 2.2.5. ROC Area of Churn=True Class: 0.876
## 2.3. Creating an ANN
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
ANNModel <- MLP(Churn.~., data=churndata, control = Weka_control(H='5'))
evaluate_Weka_classifier(ANNModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.3.1. Accuracy: 94.3894 %
## 2.3.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2801   49 |    a = False.
##  138  345 |    b = True.
##
## 2.3.3. True Positive Rate of Churn=True Class: 2801
## 2.3.4. Precision of Churn=True Class: 0.953
## 2.3.5. ROC Area of Churn=True Class: 0.905
## 2.4. Creating an Adaboost Learner with Rule Classifiers
AdaboostModel <- AdaBoostM1(Churn.~., data=churndata, control=Weka_control(W=list(JRip)))
evaluate_Weka_classifier(AdaboostModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.4.1. Accuracy: 94.9595 %
## 2.4.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2801   49 |    a = False.
##  119  364 |    b = True.
##
## 2.4.3. True Positive Rate of Churn=True Class: 2801
## 2.4.4. Precision of Churn=True Class: 0.959
## 2.4.5. ROC Area of Churn=True Class: 0.903
## 2.5. Creating a Random Forest Model
RF <- make_Weka_classifier("weka/classifiers/trees/RandomForest")
RFModel <- RF(Churn.~., data=churndata, control = Weka_control(K=1))
evaluate_Weka_classifier(RFModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
## 2.5.1. Accuracy: 90.249  %
## 2.5.2. Confusion Matrix:
## === Confusion Matrix ===
##
##    a    b   <-- classified as
## 2847    3 |    a = False.
##  322  161 |    b = True.
##
## 2.5.3. True Positive Rate of Churn=True Class: 2847
## 2.5.4. Precision of Churn=True Class: 0.898
## 2.5.5. ROC Area of Churn=True Class: 0.909
## 3. ROC Curves
sample <- floor(.67 * nrow(churndata))
set.seed(123)
train_ind <- sample(seq_len(nrow(churndata)), size = sample)
churndatatrain <- churndata[train_ind,]
churndatatest <- churndata[-train_ind,]
labels <- ifelse(churndatatest$Churn. == "True", 1 ,0)
predictions <- cbind(predict(J48Model,
newdata = bankdatatest,
type = c("probability"))[,c("YES")],
predict(JRipModel,
newdata = bankdatatest,
type = c("probability"))[,c("YES")],
predict(ANNModel,
newdata = bankdatatest,
type = c("probability"))[,c("YES")],
predict(AdaboostModel,
newdata = bankdatatest,
type = c("probability"))[,c("YES")],
predict(RFModel,
newdata = bankdatatest,
type = c("probability"))[,c("YES")]
)
J48Model <- J48(Churn.~., data = churndatatrain)
JRipModel <- JRip(Churn.~., data = churndatatrain)
ANNModel <- MLP(Churn.~., data=churndatatrain, control = Weka_control(H='5'))
AdaboostModel <- AdaBoostM1(Churn.~., data=churndatatrain, control=Weka_control(W=list(JRip)))
RFModel <- RF(Churn.~., data=churndatatrain, control = Weka_control(K=1))
labels <- ifelse(churndatatest$Churn. == "True", 1 ,0)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("YES")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("YES")],
predict(ANNModel,
newdata = churndatatest,
type = c("probability"))[,c("YES")],
predict(AdaboostModel,
newdata = churndatatest,
type = c("probability"))[,c("YES")],
predict(RFModel,
newdata = churndatatest,
type = c("probability"))[,c("YES")]
)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("YES")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("YES")]
)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("YES")]
)
View(churndata)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(ANNModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(AdaboostModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(RFModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
labels <- cbind(labels, labels)
pred2 <- prediction(predictions, labels)
labels <- cbind(labels, labels, labels, labels, labels)
pred2 <- prediction(predictions, labels)
labels <- cbind(labels, labels, labels, labels, labels, labels)
pred2 <- prediction(predictions, labels)
labels
labels <- cbind(labels, labels)
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(ANNModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(AdaboostModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(RFModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
labels <- cbind(labels, labels)
pred2 <- prediction(predictions, labels)
labels <- cbind(labels, labels, labels, labels, labels)
pred2 <- prediction(predictions, labels)
setwd("~/Eson/Lectures/Lecture 3")
bankdata <- read.csv("bankdata.csv")
View(bankdata)
setwd("~/Eson/Case 2")
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(ANNModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(AdaboostModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(RFModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
labels
labels <- cbind(labels, labels)
pred2 <- prediction(predictions, labels)
labels <- cbind(labels, labels)
labels
labels[1,10,]
labels[1:10]
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
labels
labels[1:100]
predictions
predictions[1:10]
churndatatest
churndatatest[1:10]
View(churndatatest)
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
labels[1:100]
View(predictions)
predictions[1:10]
labels
labels
labels2 <- cbind(labels, labels)
View(labels2)
View(predictions)
View(labels2)
pred2 <- prediction(predictions, labels)
labels <- cbind(labels, labels)
pred2 <- prediction(predictions, labels)
?prediction
labels <- cbind(labels, labels)
pred2 <- prediction(predictions, labels)
labels <- cbind(labels, labels,labels,labels,labels)
pred2 <- prediction(predictions, labels)
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(ANNModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(AdaboostModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(RFModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
labels
labels <- cbind(labels, labels,labels,labels,labels)
pred2 <- prediction(predictions, labels)
perf2 <- performance(pred2, "tpr", "fpr")
plot(perf2, col = list("red", "blue", "yellow", "black", "green"))
legend("bottomright",
legend = c("J48Model", "JRipModel", "ANNModel", "AdaboostModel", "RFModel"),
col = c("red", "blue", "yellow", "black", "green"),
lty = 1:1,
cex = 0.8)
?predict
sample <- floor(.67 * nrow(churndata))
nrow(churndata)
nrow(churndata) - sample
nrow(churndatatrain)
nrow(churndatatest)
?Weka_control
?predict
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
this.dir <- dirname(parent.frame(2)$ofile)
this.dir <- dirname(parent.frame(2)$file)
dirname(parent.frame(2)$file)
getSrcDirectory()[1]
getSrcDirectory("")[1]
getSrcDirectory(function(x) {x})
getSrcDirectory(function(x) {x})
getSrcDirectory(function(x) {x})
script.dir <- dirname(sys.frame(1)$ofile)
sys.frame(1)
sys.frame()
sys.frame(0)
script.dir <- dirname(sys.frame(0)$ofile)
sys.frame(0)$
setwd_thisdir <- function () {
this.dir <- dirname(parent.frame(3)$ofile)
setwd(this.dir)
}
script.dir <- dirname(sys.frame(1)$ofile)
this.file <- sys.frame(tail(grep('source',sys.calls()),n=1))$ofile
print(getwd())
source_pathname  = get("ofile",envir = parent.frame())
source_pathname  = get("case2.r",envir = parent.frame())
source_pathname  = get("case2.r",envir = parent.frame())
source_dirname = dirname(source_pathname )
setwd(source_dirname)
print(getwd())
source_pathname  = get("case2.r",envir = parent.frame())
source_pathname  = get("case2.r",envir = parent.frame())
source("case2.R")
File <- "case2.r"
Files <- list.files(path=file.path("~"),recursive=T,include.dirs=T)
Path.file <- names(unlist(sapply(Files,grep,pattern=File))[1])
Dir.wd <- dirname(Path.file)
Dir.wd
J48Model <- J48(Churn.~., data = churndatatrain)
JRipModel <- JRip(Churn.~., data = churndatatrain)
ANNModel <- MLP(Churn.~., data=churndatatrain, control = Weka_control(H='5'))
AdaboostModel <- AdaBoostM1(Churn.~., data=churndatatrain, control=Weka_control(W=list(JRip)))
RFModel <- RF(Churn.~., data=churndatatrain, control = Weka_control(K=1))
labels <- ifelse(churndatatest$Churn. == "False.", 1 ,0)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("False.")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("False.")],
predict(ANNModel,
newdata = churndatatest,
type = c("probability"))[,c("False.")],
predict(AdaboostModel,
newdata = churndatatest,
type = c("probability"))[,c("False.")],
predict(RFModel,
newdata = churndatatest,
type = c("probability"))[,c("False.")]
)
labels <- cbind(labels, labels,labels,labels,labels) # labels must have the same count with the models you have
pred2 <- prediction(predictions, labels)
perf2 <- performance(pred2, "tpr", "fpr")
plot(perf2, col = list("red", "blue", "yellow", "black", "green"))
legend("bottomright",
legend = c("J48Model", "JRipModel", "ANNModel", "AdaboostModel", "RFModel"),
col = c("red", "blue", "yellow", "black", "green"),
lty = 1:1,
cex = 0.8)
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
predictions <- cbind(predict(J48Model,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(JRipModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(ANNModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(AdaboostModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(RFModel,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
labels <- cbind(labels, labels,labels,labels,labels) # labels must have the same count with the models you have
pred2 <- prediction(predictions, labels)
perf2 <- performance(pred2, "tpr", "fpr")
plot(perf2, col = list("red", "blue", "yellow", "black", "green"))
legend("bottomright",
legend = c("J48Model", "JRipModel", "ANNModel", "AdaboostModel", "RFModel"),
col = c("red", "blue", "yellow", "black", "green"),
lty = 1:1,
cex = 0.8)
# 2.1. Modeling a Decision Tree
J48Model <- J48(Churn.~., data = churndata)
summary(J48Model)
evaluate_Weka_classifier(J48Model,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
J48Model <- J48(Churn.~., data = churndata)
evaluate_Weka_classifier(J48Model,
newdata=churndata,
numFolds = 10,
class = T)
JRipModel <- JRip(Churn.~., data = churndata)
evaluate_Weka_classifier(JRipModel,
newdata=churndata,
numFolds = 10,
class = T)
evaluate_Weka_classifier(JRipModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
JRipModel <- JRip(Churn.~., data = churndata)
evaluate_Weka_classifier(JRipModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
ANNModel <- MLP(Churn.~., data=churndata, control = Weka_control(H='5'))
evaluate_Weka_classifier(ANNModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
AdaboostModel <- AdaBoostM1(Churn.~., data=churndata, control=Weka_control(W=list(JRip)))
evaluate_Weka_classifier(AdaboostModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
RF <- make_Weka_classifier("weka/classifiers/trees/RandomForest")
RFModel <- RF(Churn.~., data=churndata, control = Weka_control(K=1))
evaluate_Weka_classifier(RFModel,
newdata=churndata,
numFolds = 10,
class = T,
seed = 1)
x <- perf2
J48ModelROC <- J48(Churn.~., data = churndatatrain)
JRipModelROC <- JRip(Churn.~., data = churndatatrain)
ANNModelROC <- MLP(Churn.~., data=churndatatrain, control = Weka_control(H='5'))
AdaboostModelROC <- AdaBoostM1(Churn.~., data=churndatatrain, control=Weka_control(W=list(JRip)))
RFModelROC <- RF(Churn.~., data=churndatatrain, control = Weka_control(K=1))
labels <- ifelse(churndatatest$Churn. == "True.", 1 ,0)
predictions <- cbind(predict(J48ModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(JRipModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(ANNModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(AdaboostModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")],
predict(RFModelROC,
newdata = churndatatest,
type = c("probability"))[,c("True.")]
)
labels <- cbind(labels, labels,labels,labels,labels) # labels must have the same count with the models you have
pred2 <- prediction(predictions, labels)
perf2 <- performance(pred2, "tpr", "fpr")
plot(perf2, col = list("red", "blue", "yellow", "black", "green"))
legend("bottomright",
legend = c("J48Model", "JRipModel", "ANNModel", "AdaboostModel", "RFModel"),
col = c("red", "blue", "yellow", "black", "green"),
lty = 1:1,
cex = 0.8)
setwd("~/Eson/Lectures/Lecture 4")
setwd("~/Eson/Lectures/Lecture 4")
deliverytime <- read.csv("deliverytime.csv")
lrfit <- lm(deltime~., data=deliverytime)
summary(lrfit)
deliverytime <- read.csv("deliverytime.csv")
lrfit <- lm(deltime~., data=deliverytime)
summary(lrfit)
View(deliverytime)
plot(lrfit)
?lm
plot(lrfit)
plot(lrfit)
par( mfrow =c(2,2),mar=2,2,2,2))
par( mfrow =c(2,2),mar=2,2,2,2))
par(mfrow =c(2,2),mar=2,2,2,2))
par(mfrow =c(2,2),mar=c(2,2,2,2))
plot(lrfit)
slrfit <- lm(deltime^0.5~., data=deliverytime)
plot(slrfit)
summary(slrfit)
