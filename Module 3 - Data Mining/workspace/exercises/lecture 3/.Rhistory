library(RSQLite)
#Connect to the Source System
db <- dbConnect(SQLite(), dbname="source.db")
#Extract Today's Shippers Data
shippers_extract = dbGetQuery(db,'SELECT * FROM shippers')
#Close Source Connection
dbDisconnect(db)
#Connect to the DW System
dwcon <- dbConnect(SQLite(), dbname="datawarehouse.db")
#Inster into S
deletesshippers = dbGetQuery(dwcon,"DELETE FROM s_shippers")
dbWriteTable(conn = dwcon, name = "s_shippers",
value =shippers_extract, row.names = FALSE, append = TRUE)
dbGetQuery(dwcon, "SELECT * FROM s_shippers")
#Get New and Changed Data
s_table_new_data <- dbGetQuery(dwcon, "SELECT * FROM s_shippers WHERE
shipperid NOT IN (SELECT shipperid FROM m_shippers)")
s_table_changed_company_name <- dbGetQuery(dwcon, "SELECT s.ShipperID, s.CompanyName,
s.Phone FROM S_Shippers s INNER JOIN
M_Shippers m ON s.ShipperID = m.ShipperID
WHERE NOT s.CompanyName = m.CompanyName")
s_table_changed_phone_number <- dbGetQuery(dwcon, "SELECT s.ShipperID, s.CompanyName,
s.Phone FROM S_Shippers s INNER JOIN
M_Shippers m ON s.ShipperID = m.ShipperID
WHERE NOT s.Phone = m.Phone")
s_table_changed_data <- rbind(s_table_changed_company_name,s_table_changed_phone_number)
s_table_extract <- rbind(s_table_new_data,s_table_changed_data)
#Insert into X
deletequery=dbGetQuery(dwcon, "DELETE FROM X_shippers")
dbWriteTable(conn = dwcon, name = "X_Shippers", value = s_table_extract,row.names = FALSE, append = TRUE)
dbGetQuery(dwcon, "SELECT * FROM X_shippers")
#Clean X
#Select Companies with Null Names
x_table_no_companyname = dbGetQuery(dwcon, "SELECT * FROM x_shippers
WHERE companyname = ''")
x_table_no_companyname$ErrorType = "No Company Name"
#Select Duplicate Companies
x_table_duplicate_companies= dbGetQuery(dwcon, "SELECT * FROM x_shippers
WHERE companyname IN
(SELECT companyname FROM s_shippers
GROUP BY companyname HAVING
COUNT(companyname) > 1)")
x_table_duplicate_companies$ErrorType = "Duplicate Company Name"
x_table_errors = rbind(x_table_duplicate_companies,x_table_no_companyname)
#Set Unknown to Missing Phone Number
updatequery = dbGetQuery(dwcon, "UPDATE c_shippers SET Phone='Unknown Phone Number' WHERE Phone =''")
#Insert into E
deletequery=dbGetQuery(dwcon, "DELETE FROM e_shippers")
dbWriteTable(conn = dwcon, name = "e_shippers", value =x_table_errors, row.names = FALSE, append = TRUE)
dbGetQuery(dwcon, "SELECT * FROM e_shippers")
#Select Clean Data
x_table_clean_data = dbGetQuery(dwcon, "SELECT * FROM X_Shippers
WHERE ShipperID NOT IN (SELECT ShipperID FROM E_Shippers)")
#Insert into C
query=dbGetQuery(dwcon, "DELETE FROM C_Shippers")
dbWriteTable(conn = dwcon, name = "C_Shippers", value =x_table_clean_data, row.names = FALSE, append =TRUE)
dbGetQuery(dwcon, "SELECT * FROM C_Shippers")
#Update M Table
#Select All New From C
c_table_new_data = dbGetQuery(dwcon, "SELECT * FROM C_shippers c
WHERE c.ShipperID NOT IN (SELECT m.ShipperID FROM
M_shippers m )")
dbWriteTable(conn = dwcon, name = "M_Shippers_Test", value =c_table_new_data, row.names = FALSE, append = TRUE)
#Select ALl Changed From C
c_table_changed_data = dbGetQuery(dwcon, "SELECT c.* FROM C_Shippers c,
M_Shippers m
WHERE c.ShipperID = m.ShipperID and
(c.CompanyName <> m.CompanyName or c.Phone <> m.Phone)")
deletequery = dbGetQuery(dwcon, "DELETE FROM M_Shippers_Test
WHERE ShipperID IN (SELECT m.ShipperID FROM
C_Shippers c, M_Shippers m
WHERE c.ShipperID = m.ShipperID and
(c.CompanyName <> m.CompanyName or c.Phone <> m.Phone))")
dbWriteTable(conn = dwcon, name = "M_Shippers_Test", value
=c_table_changed_data, row.names = FALSE, append = TRUE)
dbGetQuery(dwcon, "SELECT * FROM M_Shippers_Test")
#Select From C and Transform to DW Format
c_table_data = dbGetQuery(dwcon, "SELECT ShipperID as [Shipper_ID],
CompanyName as [Shipper_Name], Phone as
[Current_Shipper_Phone],
DATE() as[Effective_Date] FROM C_Shippers")
c_table_data$Previous_Shipper_Phone = "Previous_Shipper_Phone"
c_table_data = c_table_data[,c("Shipper_ID", "Shipper_Name",
"Current_Shipper_Phone", "Effective_Date", "Previous_Shipper_Phone")]
#Insert into T
query=dbGetQuery(dwcon, "DELETE FROM T_Shipper")
dbWriteTable(conn = dwcon, name = "T_Shipper", value = c_table_data, row.names = FALSE, append = TRUE)
dbGetQuery(dwcon, "SELECT * FROM T_Shipper")
library(RSQLite)
#Connect to the Source System
db <- dbConnect(SQLite(), dbname="source.db")
#Extract Today's Shippers Data
shippers_extract = dbGetQuery(db,'SELECT * FROM shippers')
install.packages("pastecs")
install.packages("reshape2")
install.packages("rJava")
install.packages("RWeka")
install.packages("ROCR")
install.packages("partykit")
install.packages("e1071")
install.packages("car")
install.packages("glmnet")
install.packages("arules")
install.packages("arulesViz")
install.packages("arulesSequences")
install.packages("wordcloud")
install.packages("tm")
install.packages("twitteR")
install.packages("plyr")
install.packages ("stringr")
install.packages ("shiny")
install.packages("xlsx")
install.packages("data.table")
install.packages("MASS")
install.packages("ggplot2")
install.packages("RODBC")
install.packages("treemap")
install.packages("dplyr")
install.packages("installr")
install.packages("sqldf”)
install.packages("XLConnect")
install.packages("sqldf")
install.packages("XLConnect")
library("RWekajars", lib.loc="~/R/win-library/3.1")
library("RWeka", lib.loc="~/R/win-library/3.1")
library(RWeka)
setwd("~/Eson/Lectures/Lecture 3")
bankdata <- read.csv("bankdata.csv")
library(RWeka)
bankdata <- read.csv("bankdata.csv")
J48Model <- J48(pep~., data = bankdata)
J48Model
plot(J48Model)
JRipModel <- JRip(pep ~ ., data = bankdata)
JRipModel
plot(JRipModel)
source('~/.active-rstudio-document')
JRipModel
plot(JRipModel)
library("RWeka")
nursery <- read.csv("nursery.csv")
NaiveBayes <- make_Weka_classifier("weka/classifiers/bayes/NaiveBayes")
NBModel <- NaiveBayes(rank ~ parents + has_nur + form + children + housing + finance + health, data = nursery)
summary(NBModel)
nurserytest <- read.csv("nurserytest.csv")
nurserytest$predictions = predict(NBModel, nurserytest)
nurserytest
View(nurserytest)
library(RWeka)
# Decision tree
bankdata <- read.csv("bankdata.csv")
J48Model <- J48(pep~., data = bankdata)
J48Model
plot(J48Model)
# Rule-based
JRipModel <- JRip(pep ~ ., data = bankdata)
JRipModel
J48Model
JRipModel
install.packages("treemap")
?treegraph
?treegraph
library("treemap", lib.loc="~/R/win-library/3.1")
?treegraph
treegraph(bankdata)
library(RWeka)
creditsetnumeric <- read.csv("creditsetnumeric.csv")
creditsetnumeric$default10yr <- as.factor(creditsetnumeric$default10yr)
MLP <- make_Weka_classifier("weka/classifier/functions/MultilayerPerceptron")
ANNModel <- MLP(default10yr ~., data=creditsetnumeric, control = Weka_control(H='5'))
creditsetnumeric$default10yr <- as.factor(creditsetnumeric$default10yr)
ANNModel <- MLP(default10yr ~., data=creditsetnumeric, control = Weka_control(H='5'))
MLP <- make_Weka_classifier("weka/classifier/functions/MultilayerPerceptron")
ANNModel <- MLP(default10yr ~., data=creditsetnumeric, control = Weka_control(H='5'))
ANNModel <- MLP(default10yr ~ income + age + loan + LTI, data=creditsetnumeric, control = Weka_control(H='5'))
library(RWeka)
ANNModel <- MLP(default10yr ~ income + age + loan + LTI, data=creditsetnumeric, control = Weka_control(H='5'))
creditsetnumeric
View(creditsetnumeric)
MLP <- make_Weka_classifier("weka/classifier/functions/MultilayerPerceptron")
ANNModel <- MLP(default10yr ~ income + age + loan + LTI, data=creditsetnumeric, control = Weka_control(H='5'))
ANNModel <- MLP(default10yr ~ ., data=creditsetnumeric, control = weka_control(H='5'))
ANNModel <- MLP(default10yr ~ ., data=creditsetnumeric, control = Weka_Control(H='5'))
ANNModel <- MLP(default10yr ~ ., data=creditsetnumeric, control = Weka_control(H='5'))
ANNModel <- MLP(default10yr ~ ., data=creditsetnumeric, control = Weka_control(H='5'))
